#!/usr/bin/env bash

mkproj() {

	usage() {
		local prog=${0##*/}
		cat <<-EOF

	  usage: $prog [-hab] <ProjectName>

	  creates initial files and directories for a new java project,
	  populates files with initial boilerplate,
	  initializes git with pairs,
	  adds useful aliases to simplify repetative tasks

	  examples

	      # $prog NewJavaProject
	      create new java project directory and populate initial files

	  options

	      -h             print this message and exit
	      -a             working alone, will not use git pair-commit.
	      -b             prompt to change base directory

		EOF
	}

	alone=false
	base=false
	while getopts ':h:a:b' option; do
		case $opt in
			h) usage; exit 0;;
			a) alone=true;;
			b) base=true;;
			*) usage; exit 1;;
		esac
	done
	shift $((OPTIND - 1))

	toCamelCase() {
		local dash=$1
		arr=(${dash//-/ })
		echo "$(printf %s "${arr[@]^}")"
	}

	toDashSeperated() {
		local camel=$1
		echo $(echo "$camel" | sed 's/\(.\)\([A-Z]\)/\1-\2/g' | tr '[:upper:]' '[:lower:]')
	}



	projname=$1
	if [[ -z $projname ]]; then
		echo "error: no project name give" >&2
		echo "Enter the name of your project in UpperCamelCase"
		read projname
		# usage; exit 1
	fi


	if [[ -n $2 ]]; then
		classname=$(toCamelCase $2)
	else
		classname=$(toCamelCase $projname)
	fi

	if [[ $projname == *"-"* ]]; then
		dirname=$(echo "$projname" | awk '{print tolower($0)}')
	else
		dirname=$(toDashSeperated $projname)
	fi

	basedir=~/Desktop

	if $base; then
		echo 'Enter the directory you want to store your project in.'
		read basedir
		if [[ -d $basedir ]]; then
			echo "using $basedir as the base directory for your projects"

		else
			echo "error: $basedir does not exist"
			exit 1
		fi
	fi

	projdir=$basedir/$dirname

	if $alone; then
		users=$(cat ~/.gitconfig | sed -n -e 's/^.name = //p')
	else
		if [[ -f ~/.pairs ]]; then
			user1=$(awk -F ': ' '{if(NR==2) print $1}' ~/.pairs)
			user2=$(awk -F ': ' '{if(NR==3) print $1}' ~/.pairs)
			user1full=$(awk -F ': ' '{if(NR==2) print $2}' ~/.pairs)
			user2full=$(awk -F ': ' '{if(NR==3) print $2}' ~/.pairs)
			users="$user1full and $user2full"
		else
			echo "No .pairs file was found. Enter information to generate one"
			echo "Enter first persons full name"
			read user1full
			echo "Enter first persons email"
			read user1email
			echo "Enter second persons full name"
			read user2full
			echo "Enter second persons email"
			read user2email
			users="$user1full and $user2full"
			user1=$(echo $user1full | awk '{print tolower($1), tolower($2)}' | sed 's/ *\([^ ]\)[^ ]\{1,\} */\1/g')
			user2=$(echo $user2full | awk '{print tolower($1), tolower($2)}' | sed 's/ *\([^ ]\)[^ ]\{1,\} */\1/g')
			cat >~/.pairs <<-END
			pairs:
			  ${user1}: ${user1full}
			  ${user2}: ${user2full}
			emails:
			  ${user1}: ${user1email}
			  ${user2}: ${user2email}
			END
		fi
	fi

	if [[ -d $projdir ]]; then
		echo "error: directory $projdir already exists" >&2
		usage; exit 1
	fi


	# make directories
	mkdir -p $projdir/src/main/java $projdir/src/test/java
	# create and populate files
	cat >$projdir/src/main/java/App.java <<-END
	public class App {
	  public static void main(String[] args) {

	  }
	}
	END

	cat >$projdir/src/main/java/$classname.java <<-END
	import java.util.ArrayList;
	import java.util.List;

	public class ${classname} {

	}
	END

	cat >$projdir/src/test/java/${classname}Test.java <<-END
	import org.junit.*;
	import static org.junit.Assert.*;

	public class ${classname}Test {

	}
	END

	cat >$projdir/build.gradle <<-END
	apply plugin: 'java'
	apply plugin: 'application'

	archivesBaseName = "${dirname}"
	version = '1.0'
	mainClassName = "${classname}"

	repositories {
	  mavenCentral()
	}

	dependencies {
	  testCompile group: 'junit', name: 'junit', version: '4.+'
	}
	END


	cat >$projdir/.gitignore <<-END
	# Compiled source #
	############
	*.com
	*.class
	*.dll
	*.exe
	*.o
	*.so

	# Packages #
	############
	*.7z
	*.dmg
	*.gz
	*.iso
	*.jar
	*.rar
	*.tar
	*.zip

	# Logs and databases #
	############
	*.log

	# OS generated files #
	############
	.DS_Store
	.DS_Store?
	._*
	.Spotlight-V100
	.Trashes
	ehthumbs.db
	Thumbs.db

	# Java and Gradle #
	############
	build/
	.gradle/
	END

	cat >$projdir/README.md <<-END
	# _${projname}_

	#### _${projname}, $(date +%m-%d-%Y)_

	#### By _**${users}**_

	## Description
	_Example text for the description of the project_


	## Specifications

	| Behavior                   | Input Example     | Output Example    |
	| -------------------------- | -----------------:| -----------------:|



	## Setup/Installation Requirements

	* _Clone the repository_
	* _Run 'gradle compilJava' or if gradle is not installed run 'javac App.java' in src/main/java directory_
	* _Run 'java App' inside build directory_


	### License

	Copyright (c) $(date +%Y) **_${users}_**

	This software is licensed under the MIT license.
	END


	# Initalize git and make first commit
	cd "$projdir"
	git init
	git add .
	if $alone; then
		git commit -m "add initial project directories and files"
	else
		git pair $user1 $user2
		gir pair-commit -m "add initial project directories and files"
	fi
	atom .
	# make aliases

	# test curl to bash
	# curl | bash -s args
	# test working alone
}

# export -f mkproj
